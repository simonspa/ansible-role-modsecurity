---
# tasks file for ansible-role-modsecurity

- name: install modsecurity dependencies
  apt:
    name: ['git', 'g++', 'flex', 'bison', 'curl', 'doxygen', 'libyajl-dev', 'libgeoip-dev', 'libtool', 'dh-autoreconf', 'libcurl4-gnutls-dev', 'libxml2', 'libpcre++-dev', 'libxml2-dev', 'zlib1g-dev', 'libssl-dev', 'libxslt1-dev', 'libgd-dev']

- name: clone the modsecurity repository
  git:
    repo: "https://github.com/SpiderLabs/ModSecurity.git"
    version: "{{ modsecurity_branch }}"
    accept_hostkey: yes
    depth: 1
    force: yes
    dest: "{{ modsecurity_build_folder }}"

- name: build and install modsecurity
  shell: "{{ item }}"
  args:
    chdir: "{{ modsecurity_build_folder }}"
  with_items:
    - ./build.sh
    - git submodule init
    - git submodule update
    - ./configure
    - make -j{{ ansible_processor_vcpus|default(ansible_processor_count) }}
    - make install

- name: clone the modsecurity-nginx repository
  git:
    repo: "https://github.com/SpiderLabs/ModSecurity-nginx.git"
    version: "{{ modsecurity_nginx_branch }}"
    accept_hostkey: yes
    depth: 1
    force: yes
    dest: "{{ modsecurity_build_folder }}-nginx"

- name: read the nginx version
  command: nginx -v
  register: nginx_version_output
  changed_when: false

# nginx writes the version to stderr
- name: parse the installed nginx version
  set_fact:
    installed_nginx_version: "{{ nginx_version_output.stderr | regex_search('(\\d+\\.\\d+\\.\\d+)', '\\1') | first }}"

- name: download and extract the nginx sources for building the module
  unarchive:
    src: "http://nginx.org/download/nginx-{{ installed_nginx_version }}.tar.gz"
    remote_src: yes
    dest: /opt
    creates: "/opt/nginx-{{ installed_nginx_version }}"

- name: read the nginx compile arguments
  command: nginx -V
  register: nginx_compile_output
  changed_when: false

# nginx writes the compile arguments to stderr
- name: parse compile arguments of the installed nginx version
  set_fact:
    nginx_compile_arguments: "{{ nginx_compile_output.stderr | regex_search('configure arguments: (.*)$', '\\1') | first }}"

- name: configure the modsecurity-nginx module
  shell: ./configure --add-dynamic-module={{ modsecurity_build_folder }}-nginx {{ nginx_compile_arguments }}
  args:
    chdir: "/opt/nginx-{{ installed_nginx_version }}"

- name: build the modsecurity-nginx module
  shell: make modules
  args:
    chdir: "/opt/nginx-{{ installed_nginx_version }}"

- name: copy the module to nginx module directory
  copy:
    src: /opt/nginx-{{ installed_nginx_version }}/objs/ngx_http_modsecurity_module.so
    dest: {{ nginx_modules_dir }}
    remote_src: yes
    mode: '0644'
    force: yes

- name: Create folder for Modsec config and rules
  file:
    path: "{{ modsecurity_config_dir }}"
    state: directory

- name: Copy recommended conf to become modsecurity.conf
  copy:
    src: "{{ modsecurity_build_folder }}/modsecurity.conf-recommended"
    dest: "{{ modsecurity_config_dir }}/modsecurity.conf"
    remote_src: yes
    force: no

- name: Set Request body limit to value configured for PHP
  lineinfile:
    path: "{{ modsecurity_config_dir }}/modsecurity.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - regexp: "^SecRequestBodyLimit "
      line: "SecRequestBodyLimit {{ modsecurity_max_size }}"
    - regexp: "^SecRequestBodyNoFilesLimit "
      line: "SecRequestBodyNoFilesLimit {{ modsecurity_max_size }}"

- name: Copy unicode.mapping file also
  copy:
    src: "{{ modsecurity_build_folder }}/unicode.mapping"
    dest: "{{ modsecurity_config_dir }}/unicode.mapping"
    remote_src: yes
    force: no

- name: Activate blocking rather than detection only
  lineinfile:
    path: "{{ modsecurity_config_dir }}/modsecurity.conf"
    regexp: "^SecRuleEngine "
    line: "SecRuleEngine On"
  when: modsecurity_block

- name: Activate detection only mode
  lineinfile:
    path: "{{ modsecurity_config_dir }}/modsecurity.conf"
    regexp: "^SecRuleEngine "
    line: "SecRuleEngine DetectionOnly"
  when: not modsecurity_block

- name: Create a main.conf from template
  template:
    src: main.conf.j2
    dest: "{{ modsecurity_config_dir }}/main.conf"

- name: Obtain OWASP Modsecurity Rules
  git:
    repo: "https://github.com/SpiderLabs/owasp-modsecurity-crs"
    dest: "{{ modsecurity_config_dir }}/owasp-modsecurity-crs"
    version: "{{ modsecurity_owasp_version }}"

- name: Copy crs-setup.conf.example to become crs-setup.conf
  copy:
    src: "{{ modsecurity_config_dir }}/owasp-modsecurity-crs/crs-setup.conf.example"
    dest: "{{ modsecurity_config_dir }}/owasp-modsecurity-crs/crs-setup.conf"
    remote_src: yes
  notify:
    - validate nginx configuration
    - restart nginx
